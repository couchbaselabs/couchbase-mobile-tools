#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# Copyright (c) 2022 Couchbase, Inc All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from datetime import datetime, timedelta
from typing import Dict, List, cast

from defs import DefaultGenerator, DefaultEntry, Constant, ConstantValue, ConstantType

OUTPUT_ID = "java"

top_level_format = """//
// Copyright (c) {year}-present Couchbase, Inc All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
package com.couchbase.lite;


// THIS IS AN AUTOGENERATED FILE, MANUAL CHANGES SHOULD BE EXPECTED TO BE OVERWRITTEN

public final class Defaults {{
    private Defaults() {{}}

{generated}}}
"""


class JavaDefaultGenerator(DefaultGenerator):
    _type_mapping: Dict[str, str] = {
        ConstantType.UINT_TYPE_ID: "int",
        ConstantType.TIMESPAN_TYPE_ID: "int",
        ConstantType.SIZE_T_TYPE_ID: "long",
        ConstantType.USHORT_TYPE_ID: "int"
    }

    def transform_var_name(self, name: str) -> str:
        ret_val = str(name[0].upper())
        for i in range(1, len(name)):
            if name[i].isupper() and not name[i - 1].isupper():
                ret_val += f"_{name[i]}"
            else:
                ret_val += name[i].upper()

        return ret_val

    def transform_var_value(self, type: ConstantType, value: ConstantValue) -> str:
        if type.subset == "enum":
            enum_val = self.transform_var_name(value.val)
            return f"{type.id}.{enum_val}"

        if type.id == ConstantType.BOOLEAN_TYPE_ID:
            return str(value.val).lower()

        if type.id == ConstantType.TIMESPAN_TYPE_ID:
            if value.unit == "seconds":
                return str(cast(timedelta, value.val).seconds)
            else:
                raise Exception(f"Unknown unit '{value.unit}'")

        if type.id == ConstantType.UINT_TYPE_ID:
            if value.val == "max":
                return "Integer.MAX_VALUE"

        return str(value)

    def compute_class(self, name: str) -> str:
        return f"    public static final class {name} {{\n        private {name}() {{}}\n\n"

    def compute_value(self, constant: Constant) -> str:
        ret_val = f"        /** {constant.description} */\n"
        platform_type = constant.type(OUTPUT_ID)
        platform_value = constant.value(OUTPUT_ID)
        type = self._type_mapping[platform_type.id] if platform_type.id in self._type_mapping else platform_type
        name = self.transform_var_name(constant.name)
        value = self.transform_var_value(platform_type, platform_value)
        ret_val += f"        public static final {type} {name} = {value};\n\n"
        return ret_val

    def generate(self, input: List[DefaultEntry]) -> Dict[str, str]:
        ee_output: str = ""
        ce_output: str = ""
        generated: Dict[str, str] = {}
        for entry in input:
            if len(entry.only_on) > 0 and not OUTPUT_ID in entry.only_on:
                continue

            output = self.compute_class(entry.name)
            for c in entry.constants:
                if len(c.only_on) > 0 and not OUTPUT_ID in c.only_on:
                    continue

                output += self.compute_value(c)

            output = output.rstrip() + "\n    }\n\n"

            ee_output += output
            if not entry.ee:
                ce_output += output

        ee_output = ee_output.rstrip() + "\n"
        ce_output = ce_output.rstrip() + "\n"

        generated["Defaults-EE.java"] = top_level_format.format(year=datetime.now().year, generated=ee_output)
        generated["Defaults-CE.java"] = top_level_format.format(year=datetime.now().year, generated=ce_output)

        return generated


if __name__ == "__main__":
    raise Exception("This script is not standalone, it is used with gen_defaults.py")
