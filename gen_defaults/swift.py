#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# Copyright (c) 2022 Couchbase, Inc All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from datetime import datetime, timedelta
from typing import List, Dict, cast
from defs import DefaultGenerator, DefaultEntry, Constant, ConstantValue, ConstantType, make_c_style_varname

top_level_format = """//
//  Defaults.swift
//  CouchbaseLite
//
//  Copyright (c) {year}-present Couchbase, Inc All rights reserved.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

// THIS IS AN AUTOGENERATED FILE, MANUAL CHANGES SHOULD BE EXPECTED TO
// BE OVERWRITTEN

import Foundation

public struct Defaults {{
{generated}
}}
"""

class SwiftDefaultGenerator(DefaultGenerator):
    _type_mapping: Dict[str, str] = {
        ConstantType.BOOLEAN_TYPE_ID: "Bool",
        ConstantType.INT_TYPE_ID: "Int",
        ConstantType.LONG_TYPE_ID: "Int64",
        ConstantType.TIMESPAN_TYPE_ID: "TimeInterval",
        ConstantType.UINT_TYPE_ID: "UInt",
        ConstantType.USHORT_TYPE_ID: "UInt16",
        ConstantType.SIZE_T_TYPE_ID: "UInt64"
    }

    def transform_var_value(self, type: str, value: ConstantValue):
        if type.subset == "enum":
            return f"{type.id}.{value}"

        if type.id == ConstantType.BOOLEAN_TYPE_ID:
            return str(value).lower()

        if type.id == ConstantType.TIMESPAN_TYPE_ID:
            if value.unit == "seconds":
                return str(cast(timedelta, value.val).seconds) + "seconds"
            else:
                raise Exception(f"Unknown unit '{value.unit}'")

        if type.id == ConstantType.UINT_TYPE_ID:
            if value.val == -1:
                return "UInt.max"

        return str(value)

    def compute_line(self, prefix_name: str, constant: Constant):
        value = self.transform_var_value(constant.type, constant.value)
        generated = f"\t/// [{value}] {constant.description}\n"
        type = self._type_mapping[constant.type.id] if constant.type.id in self._type_mapping else constant.type
        objc_varname = make_c_style_varname(prefix_name, constant.name)
        varname = f"default{prefix_name}{constant.name}"
        generated += f"\tstatic let {varname}: {type} = {objc_varname}"
        if constant.type.id == ConstantType.BOOLEAN_TYPE_ID:
            generated += ".boolValue"

        generated += "\n\n"
        return generated

    def generate(self, input: List[DefaultEntry]) -> Dict[str, str]:
        generated: Dict[str, str] = {}
        generated_output = ""
        for entry in input:
            for c in entry.constants:
                if len(c.only_on) > 0 and not "swift" in c.only_on:
                    continue
                
                generated_output += self.compute_line(entry.name, c)

        generated["Defaults.swift"] = top_level_format.format(year = datetime.now().year, generated = generated_output)
        return generated

if __name__ == "__main__":
    raise Exception("This script is not standalone, it is used with gen_defaults.py")